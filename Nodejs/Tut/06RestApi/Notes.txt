A REST (REpresentational State Transfer) API is a web service that follows the principles of REST architecture to interact between clients and servers over HTTP. It uses standard HTTP methods (GET, POST, PUT, DELETE) to perform CRUD (Create, Read, Update, Delete) operations on resources, and data is typically transferred in JSON or XML format.

Principles of REST API
REST APIs are built on six fundamental principles that define their architecture and functionality:

Statelessness: Each request from a client to the server must contain all the necessary information, and the server does not store session-related data.
Client-Server Architecture: The client and server are separate entities, allowing for independent development and scalability.
Uniform Interface: A consistent way of accessing resources, typically via standardized HTTP methods (GET, POST, PUT, DELETE).
Cacheability: Responses from the server should indicate whether they can be cached to improve performance.
Layered System: The architecture should support multiple layers (such as load balancers, authentication servers, and data storage) without affecting the client-server interaction.
Code on Demand (Optional): The server can send executable code (like JavaScript) to the client to enhance functionality, though this is rarely used.


GET Method
It is used to retrieve an existing resource from the server. The server responds with the resource's data, often in JSON or XML format. It is used to read the data.

POST Method
It is used to create a new resource on the server. It sends data to the server as part of the request body, typically in JSON or XML format. It is used to create a new resource on the server.

PUT Method
It is used to update an existing resource on the server. It requires the client to send the updated data in the request body. It is used to update the data.

PATCH Method
It is used to apply partial modifications to a resource. Unlike PUT, which typically updates the entire resource, PATCH only sends the changes to be made, making it more efficient in certain scenarios. It is used to partially update the data on the server.

DELETE Method
This method is used to delete a resource from the server. Once executed successfully, it usually returns a status code indicating the deletion has been completed, such as 200 OK or 204 No Content. It is used to delete the data.


Common HTTP Status Codes in REST APIs
When working with REST APIs, youâ€™ll often encounter the following HTTP status codes that indicate the result of the request:

200 OK: The request was successful, and the server returned the requested data.
201 Created: A new resource has been successfully created (usually returned for POST requests).
400 Bad Request: The request is malformed or missing required data.
401 Unauthorized: The request requires authentication, and the user is not authorized.
404 Not Found: The requested resource was not found.
500 Internal Server Error: The server encountered an unexpected condition.